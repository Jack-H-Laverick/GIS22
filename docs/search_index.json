[["index.html", "An Introduction to Making Maps with R Introduction", " An Introduction to Making Maps with R Jack H. Laverick, University of Strathclyde 09 - April - 2021 Introduction Welcome! This document provides a brief introduction to maps and how to think about creating them in the R programming language. It supports a two hour workshop, but you may also want to make your own notes to capture stray comments you found useful. You do not need to know how to code for this workshop. If you feel like trying to code afterwards, then you can send questions to jack.laverick@strath.ac.uk. You will all receive a copy of this document to help you. To use this document, you can click on the table of contents to the left to jump to sections. You’ll notice buttons dotted around the document labelled Code. Clicking on these will reveal the code used to create example maps. Tasks throughout the workshop are contained in yellow boxes. We have a few learning objectives for today. By the end of the workshop students should be able to: explain the situations maps are useful for. identify the types of data used to make a map. articulate your mapping goals using formal terminology. explain the benefits of creating maps using a programming language. plan code to create a map. "],["breakout-introductions.html", "1 BREAKOUT - Introductions", " 1 BREAKOUT - Introductions 5 minute task: Introduce yourselves to your group. What’s your name? Which institution do you work at? What data do you work with? What maps do you want to make? prompt: maps of study sites, maps of routes… "],["what-can-we-use-maps-for.html", "2 What Can We Use Maps For? 2.1 “Pretty” maps 2.2 Maps that tell a story 2.3 Maps as infographics 2.4 Maps as scientific figures 2.5 “Technical” maps", " 2 What Can We Use Maps For? explain the situations maps are useful for. articulate your mapping goals using formal terminology. 5 minute task: What Kind of Maps Have You Seen? https://docs.google.com/document/d/1CTwDJgGVxZCG87JPBWwnZ5IKLqKv6rrd5kmLggLUR8w/edit?usp=sharing Ok so that was a bit of a broad question. You can make a make of anything which has a spatial component to it. However, we can choose to make maps which have different purposes. If you wanted you could try and reimagine the same data for any of the following flavours of map, and they aren’t neccessarilly mutually exclusive. 2.1 “Pretty” maps When I say pretty maps, I’m thinking of maps which aren’t really intended to convey information, but might be great for pulling in an audience, either for a conference talk or the general public. You may sacrific some accuracy in the interest of making it eye-catching. 2.2 Maps that tell a story I’m sure you saw these sorts of things at school, maybe documenting the journey of some explorer or a migration. These can be great when both time and space matter for communicating a narrative. 2.3 Maps as infographics Infographics are a halfway house between the data-driven technical end of maps, and the pretty engaging end. Putting extra data around a map allows you to create an engaging image for some audiences, but for technical audiences there may be more direct ways to communicate your message. 2.4 Maps as scientific figures Scientific maps, the kind found in academic papers, will often try to share a single message as part of the broader story in the manuscript. The aim here is to be clear, minimise clutter, and to be accurate. 2.5 “Technical” maps At the far end of the spectrum are techincal working maps. These are things like the ordnance survey (OS) maps from the UK where a variety of different, highly accurate, datasets are squeezed into a single visualisation. I think the advent of digital interactive maps is largely relegating these to history, but there are still examples in industry where groups choose to work with densley annotated maps and OS maps are still great for hiking when you can’t trust reception or batteries! "],["data-types-for-maps.html", "3 Data Types For Maps 3.1 Points 3.2 Lines 3.3 Polygons 3.4 Rasters", " 3 Data Types For Maps identify the types of data used to make a map. articulate your mapping goals using formal terminology. When it comes to building a map, just like any other figure, there are multiple ways to display your data. You’ll be able to go a long way towards recreating something you like the look of if you can break it down into its constituent parts. The best way to display your data on a map will vary depending on what you want to show, and whether you want to combine multiple datasets by layering up map elements. There are two main flavours of data for maps, vectors and rasters (above, left and right). If you know anything about digital image formats you might be familiar with this. Vectors are join the dot exercises, this means they don’t become pixelated when you change the image size, and they can take up less memory than a high resolution raster because you just need to store the rules for connecting points. Rasters are a grid of cells and are very powerful tools useful for visualising regularly arranged data. They are specialised for this use case though, so might not be the best way to show every dataset you come across. 3.1 Points Points are useful for indicating specific locations. Think sampling locations and other points of interest. The example below plots the locations of life boat stations around the UK and Ireland, importing from a csv file. You can download the data for yourself here. If your data consists of lots of points and is regularly arranged have a look at the section on rasters. RNLI &lt;- read.csv(&quot;../data/RNLI.csv&quot;) # Import data from a csv file ggplot(RNLI) + # Use the data to start a plot geom_point(aes(X, Y, fill = Region), colour = &quot;black&quot;, shape = 21) + # Make a super simple &quot;map&quot; using points theme_minimal() + # Change appearance to a template coord_equal() + # Set the aspect ratio labs(x = &quot;Longitude (E)&quot;, y = &quot;Latitude (N)&quot;, # Add some labels caption = &quot;Lifebat stations around the UK and Ireland&quot;) 3.2 Lines Lines are produced by connecting points, they are useful for showing boundaries or tracks. Think coastlines and animal tracks. The example below plots the tracks of anonymised boats around the UK, importing from a shapefile. You can download the data for yourself here. Boats &lt;- sf::st_read(&quot;../data/Anonymised_AIS_Derived_Track_Lines_2015_MMO/&quot;, quiet = TRUE) %&gt;% # Import data from a shapefile arrange(Shape_Leng) # Order the data so long journeys are plotted on top of short journeys ## There&#39;s a lot of data in the shape file, if this stresses out your computer try filtering out some of the boat tracks using an SQL query. Example below. #Boats &lt;- sf::st_read(&quot;../data/Anonymised_AIS_Derived_Track_Lines_2015_MMO/&quot;, quiet = TRUE, # Import data from a shapefile # query = &quot;SELECT Shape_Leng FROM Anonymised_AIS_Derived_Track_Lines_2015_MMO WHERE Shape_Leng &gt; 10000&quot;) %&gt;% # You can import a subset of the data using an SQL query. # arrange(Shape_Leng) # Order the data so long journeys are ggplot(Boats) + # Start the plot geom_sf(aes(colour = Shape_Leng), size = 0.05) + # Plot the lines in the shape file scale_colour_gradient(low = &quot;#132B43&quot;, high = &quot;#e6c41e&quot;) + # Set a colour scale theme_minimal() + # Use an appearance template labs(x = &quot;Longitude (E)&quot;, y = &quot;Latitude (N)&quot;, # Add some labels caption = &quot;MMO tracked boat journeys&quot;, colour = &quot;Distance (m)&quot;) 3.3 Polygons Polygons are produced by enclosing lines. This allows you to fill an area. This can be useful for indicating marine protected areas or land masses. The example below plots ICES fishing areas in the north Atlantic, importing from a shape file. You can get the data here. ICES &lt;- sf::st_read(&quot;../data/ICES_areas/&quot;, quiet = TRUE) %&gt;% # Import the polygons from a shapefile filter(SUBOCEAN == 2) %&gt;% # Limit to north Atlantic drop_na(F_SUBAREA) # Drop polygons labelled NA ggplot(ICES) + # Start a plot geom_sf(aes(fill = F_SUBAREA), size = 0.5, colour = &quot;white&quot;) + # Add the polygons theme_minimal() + # Use an appearance template labs(x = &quot;Longitude (E)&quot;, y = &quot;Latitude (N)&quot;, # Add some labels caption = &quot;ICES fishing areas&quot;, fill = NULL) 3.4 Rasters Rasters are a regular arrangement of cells which cover an area. They are useful when you have continuous data which changes across an area. Think sea surface temperature or depth. You wouldn’t want to define a polygon for every box and fill them with a unique colour! Rasters excel at doing this particular job. Rasters can be saved in many formats, this can be as simple as a csv file of regularly spaced X and Y coordinates. The example below imports a raster layer of distance from shore directly from an online database. library(sdmpredictors) # Load functions distance_to_shore &lt;- load_layers(&quot;MS_biogeo05_dist_shore_5m&quot;) # Import raster ne_atlantic_ext &lt;- extent(-100, 45, 30.75, 72.5) # Define a cropping window distance_to_shore_crop &lt;- crop(distance_to_shore, ne_atlantic_ext) # Crop raster to fit the North Atlantic my_colors = colorRampPalette(c(&quot;#5E85B8&quot;,&quot;#EDF0C0&quot;,&quot;#C13127&quot;)) # Get a colour ramp plot(distance_to_shore_crop, col = my_colors(1000), axes=FALSE, box=FALSE) # Plot the raster title(cex.sub = 1.25, sub = &quot;Distance from shore (km)&quot;, # Add labels line = -1.5) "],["breakout-map-dissection.html", "4 BREAKOUT - Map Dissection", " 4 BREAKOUT - Map Dissection 5 minute task: Discuss which data types were used to make these maps. https://upload.wikimedia.org/wikipedia/commons/f/fa/Status_of_Global_Drifter_Array.gif https://mikkovihtakari.github.io/PlotSvalbard/articles/PlotSvalbard_files/figure-html/unnamed-chunk-18-1.png https://www.esa.int/var/esa/storage/images/esa_multimedia/videos/2012/07/mediterranean_sea-surface_temperature/11074281-3-eng-GB/Mediterranean_sea-surface_temperature_pillars.jpg https://niwa.co.nz/sites/niwa.co.nz/files/20190116-sea-surface-temperature.png https://ukfisheries.net/uploads/documents/uk-fisheries-naf-map.jpg https://media.springernature.com/lw685/springer-static/image/art%3A10.1038%2Fs41598-020-61771-z/MediaObjects/41598_2020_61771_Fig1_HTML.png https://i.pinimg.com/originals/8d/b0/55/8db055de706a02f65910d30973723be0.jpg prompt: you might need to use more than one data type to recreate some maps. "],["break.html", "5 Break", " 5 Break "],["why-would-we-think-about-using-r.html", "6 Why Would We Think About Using R? 6.1 Open source 6.2 Reproducibility 6.3 Geocomputation", " 6 Why Would We Think About Using R? explain the benefits of creating maps using a programming language. plan code to create a map. It’s true there are many programmes out there which let you build maps. These can be everything from image editors like Photoshop, to proprietary GIS software like ARCGIS. Using a programming language offers a number of advantages in some situations. 6.1 Open source This is the main benefit. R is Free, when you leave your institution you will still be able to use it without a license. The language is also ever expanding, and there is tonnes of help online which you don’t just get in a manual. Look on Twitter for #Rspatial. Whenever someone writes code that has wider use, it’s likely they will write it into a package. Below I’ve listed some really helpful ones you may want to look into for making maps and using spatial data. raster terra sf stars rayshader 6.2 Reproducibility Code is key to reproducible (and repeatable science). It’s hard to document which button you clicked on, but code is always there to come back to. This also means if you ever want to tweak something you can just change one line in the code, instead of having to manually change elements. It also means once you’ve figured out a task once, it’s very fast to do the same thing again for different locations. 6.3 Geocomputation Unlike in an image editor, you can perform further calculations. Your data may be of a different type to the data visualistion you had in mind. This might be a problem if you were creating your map in photoshop or cough powerpoint, but with R you can perform a variety of spatial calculations to create new objects to plot. You can either cast the data into a new type, point ⇢ line ⇢ polygon, or summarise your data into a new object for mapping, perhaps a raster. I’ve given a few examples of what’s possible below, but Google is your friend (and stack overflow) for finding new and exciting options. 6.3.0.1 Contours rasters ⇢ lines or polygons You may have a raster containing a lot of information, but want to combine the information with other data layers. To avoid things getting too busy you can reduce the raster to contour lines. These show the boundaries for areas contained within a particular value. Think of contour lines for elevation on an ordinance survey map. The example below gets contour lines from the distance to shore data. # Contour example raster library(sdmpredictors) # Load functions distance_to_shore &lt;- load_layers(&quot;MS_biogeo05_dist_shore_5m&quot;) %&gt;% # Import raster subset(1) # This is just some data cleaning ne_atlantic_ext &lt;- extent(-100, 45, 30.75, 72.5) # Define a cropping window distance_to_shore_crop &lt;- crop(distance_to_shore, ne_atlantic_ext) # Crop raster to fit the North Atlantic contour &lt;- rasterToContour(distance_to_shore_crop) # Calculate contours my_colors = colorRampPalette(c(&quot;#5E85B8&quot;,&quot;#EDF0C0&quot;,&quot;#C13127&quot;)) # Get a colour ramp plot(distance_to_shore_crop, col = my_colors(1000), axes=FALSE, box=FALSE) # Plot the raster plot(contour, add = TRUE) # Add contour lines title(cex.sub = 1.25, sub = &quot;Distance from shore (km), with contours&quot;, # Add labels line = -1.5) 6.3.0.2 Density maps points ⇢ lines or polygons You can think of density maps as being closely related to contour plots. Really what you are doing is creating contours (filled = polygons, not filed = lines) of a density field. The density field will be a raster which has been computed from point data. So you can see how to get to a density map you need to move from points through multiple data types to get to the visualisation you’re after. The example below calculates the density of lifeboat stations. RNLI &lt;- read.csv(&quot;../data/RNLI.csv&quot;) # Import the lifeboat station positions ggplot(RNLI, aes(X, Y)) + # Start the plot, specifying x and y column geom_density2d_filled() + # Add a filled density field geom_point(colour = &quot;black&quot;, fill = &quot;white&quot;, shape = 21) + # Add the points on top theme_minimal() + # Use and aesthetic template coord_equal() + # Set the aspect ratio labs(x = &quot;Longitude (E)&quot;, y = &quot;Latitude (N)&quot;, # Add labels fill = &quot;Density&quot;, caption = &quot;Lifebat stations around the UK and Ireland&quot;) The next code chunk creates the same figure, but uses a slightly different syntax to play nicely with SF objects. The main advantage is that you can easily change map projections and the density field is measured in “real space”. See the section on map projections for more details. RNLI &lt;- read.csv(&quot;../data/RNLI.csv&quot;) %&gt;% # Import the points again sf::st_as_sf(coords = c(&quot;X&quot;, &quot;Y&quot;), crs = 4326) %&gt;% # Convert to sf points using the x and y column as coordinates sf::st_transform(crs = 3035) # Use a different map projection ggplot(RNLI) + # Start the plot stat_density_2d_filled(mapping = ggplot2::aes(x = purrr::map_dbl(geometry, ~.[1]), # Calculate density from the sf object y = purrr::map_dbl(geometry, ~.[2]))) + geom_sf(fill = &quot;white&quot;, colour = &quot;black&quot;, shape = 21) + # Add the points on top theme_minimal() + # Use an aesthetic template labs(x = &quot;Longitude (E)&quot;, y = &quot;Latitude (N)&quot;, # Add labels fill = &quot;Density&quot;, caption = &quot;Lifebat stations around the UK and Ireland&quot;) 6.3.0.3 Point in polygon analysis polygons ⇢ to points There may be times when you want to join polygon attributes (fishing area or habitat types) to points or grid cells (animal tracker pings or climate predictions). The way to do this is to perform a spatial join. In the example below I’m showing the ICES fishing areas a boat passes through. To do this we sample the polygons at points along the longest boat journey from the shipping dataset. ICES &lt;- sf::st_read(&quot;../data/ICES_areas/&quot;, quiet = TRUE) %&gt;% # Import the polygons from a shapefile filter(SUBOCEAN == 2) %&gt;% # Limit to north Atlantic drop_na(F_SUBAREA) # Drop polygons labelled NA Boats &lt;- sf::st_read(&quot;../data/Anonymised_AIS_Derived_Track_Lines_2015_MMO/&quot;, quiet = TRUE, # Import data from a shapefile query = &quot;SELECT Shape_Leng FROM Anonymised_AIS_Derived_Track_Lines_2015_MMO WHERE Shape_Leng &gt; 1000000&quot;) %&gt;% # You can import a subset of the data using an SQL query. filter(Shape_Leng == max(Shape_Leng)) %&gt;% # Keep only the longest ship journey sf::st_cast(&quot;POINT&quot;) %&gt;% # Convert the line to points sf::st_transform(crs = sf::st_crs(ICES)) %&gt;% # Make sure the map projections match sf::st_join(ICES) # Ask which polygons points fall in ICES &lt;- filter(ICES, F_CODE %in% Boats$F_CODE) # Drop ICES areas the ship didn&#39;t go through ggplot() + # Start the plot geom_sf(data = ICES, fill = &quot;grey&quot;, colour = &quot;white&quot;) + # Mark the ICES areas geom_sf(data = Boats, aes(colour = F_CODE)) + # Colour points by ICES area theme_minimal() + # Use an appearance template labs(x = &quot;Longitude (E)&quot;, y = &quot;Latitude (N)&quot;, # Add some labels caption = &quot;MMO tracked boat journeys&quot;, colour = &quot;ICES area&quot;) 6.3.0.4 Polygonising raster ⇢ polygons If you have a qualitative raster (say of 5 habitat types) you may want to merge identical cells into a single shape. This also opens the door to point in polygon analysis like above. There are also functions which let you sample points from a raster directly, but you won’t have the polygon for other uses. For the example below I’ve rounded the distance to shore dataset to the nearest 1000 km. This gives us three bands of distance we can condense into three shapes. I’ve made the boundaries for the polygons white to “prove” to you that the cells have merged into a single polygon. library(stars) distance &lt;- round(distance_to_shore_crop, -3) %&gt;% # Round distance to shore to the nearest 1000km st_as_stars() %&gt;% # convert to stars object (intermediate step) st_as_sf(merge = TRUE, as_points = FALSE) # Merge cells with the same value to an sf polygon ggplot(distance) + # Start the plot geom_sf(aes(fill = layer), colour = &quot;white&quot;) + # Add the polygons theme_minimal() + # Use an aesthetic template labs(x = &quot;Longitude (E)&quot;, y = &quot;Latitude (N)&quot;, # Add labels fill = &quot;Distance&quot;, caption = &quot;Distance from shore (nearest 1000 km)&quot;) "],["breakout-pseudo-coding.html", "7 BREAKOUT - Pseudo-coding", " 7 BREAKOUT - Pseudo-coding 10 minute task: Spend a couple of minutes per person in your group creating pseudo-code for a map they would like to produce. "],["map-projections.html", "8 Map Projections 8.1 Why do map projections matter? 8.2 Mercator 8.3 High-latitude 8.4 Arctic-centred", " 8 Map Projections articulate your mapping goals using formal terminology. explain the benefits of creating maps using a programming language. Any time you look at a 2D map you are looking at a map projection which contorts a 3D surface to fit on a page (sorry flat earthers). The Hereford Mappa Mundi (above) looks nonsensical at first, but that’s only because you don’t immediately understand the rules defining the map projection. There are many different ways to project the globe, all with pros and cons. 8.1 Why do map projections matter? The units of a map projection are not constant in terms or real world distance (see above). This can affect any geocomputation you do, such as looking for nearest neighbours. Map projections can also seriously affect how you view spatial relationships, and can have a significant impact on your story telling. The Spilhaus map projection (below) is an extreme case which reimagines the world as a single ocean. I’ve included code below to reproject a world map to a few example map projections. These projections are defined as coordinate reference systems (crs) with common ones accessible as epsg codes. I’ve focussed on varying latitude in the examples, but you might want to think about other factors for your studies, such as whether to centre on the Pacfic, or other longitudes. You can play around with other map projections by searching on google for epsg codes supported by R. 8.2 Mercator land &lt;- rnaturalearth::ne_countries(scale = &quot;medium&quot;, returnclass = &quot;sf&quot;) # Import a world map ggplot(land) + # Start a plot geom_sf() + # Add the polygons theme_void() + # use an aesthetic template labs(caption = str_glue(&quot;EPSG code: {sf::st_crs(land)$epsg}&quot;)) # Add a label for the projection 8.3 High-latitude land &lt;- rnaturalearth::ne_countries(scale = &quot;medium&quot;, returnclass = &quot;sf&quot;) %&gt;% # Import a world map sf::st_transform(crs = 3035) # Transform the polygons to a new projection ggplot(land) + geom_sf() + theme_void() + labs(caption = str_glue(&quot;EPSG code: {sf::st_crs(land)$epsg}&quot;)) 8.4 Arctic-centred land &lt;- rnaturalearth::ne_countries(scale = &quot;medium&quot;, returnclass = &quot;sf&quot;) %&gt;% sf::st_transform(crs = 3575) # Transform to a third crs ggplot(land) + geom_sf() + theme_void() + labs(caption = str_glue(&quot;EPSG code: {sf::st_crs(land)$epsg}&quot;)) "],["extra-tools.html", "9 Extra Tools 9.1 Insets 9.2 Backgrounds 9.3 3D", " 9 Extra Tools As a final bonus I’ve included a few examples of other things which can help you in your map making with R. These didn’t really fit anywhere else, but are tricks I use all the time! 9.1 Insets It can be really helpful to have a smaller plot on top of a bigger plot (an inset window). You can do this with any kind of plot, but it’s particularly useful for maps, as it allows you to show zoomed in views, or positions relative to larger landmasses. The general workflow is to make two plots before combining them ## Create a map of the world with a point marked on it land &lt;- rnaturalearth::ne_countries(scale = &quot;medium&quot;, returnclass = &quot;sf&quot;) %&gt;% # Import a world map sf::st_transform(crs = 3035) # Transform the polygons to a new projection point &lt;- data.frame(x = 0, y = 60) %&gt;% # Set your coordiantes sf::st_as_sf(coords = c(&quot;x&quot;, &quot;y&quot;), crs = 4326) %&gt;% # Convert to SF object sf::st_transform(crs = 3035) # Transform to a new crs World_map &lt;- ggplot() + # Start the plot geom_sf(data = land, fill = &quot;white&quot;, colour = &quot;white&quot;, size = 0.1) + # Add the land polygons geom_sf(data = point, colour = &quot;orange&quot;) + # Add a marked point theme_void() # Use an aesthetic template ## Create the zoomed in map for RNLI stations RNLI &lt;- read.csv(&quot;../data/RNLI.csv&quot;) %&gt;% # Import the points again sf::st_as_sf(coords = c(&quot;X&quot;, &quot;Y&quot;), crs = 4326) # Convert to sf points using the x and y column as coordinates RNLI_map &lt;- ggplot(RNLI) + # Start the plot stat_density_2d_filled(mapping = ggplot2::aes(x = purrr::map_dbl(geometry, ~.[1]), # Calculate density from the sf object y = purrr::map_dbl(geometry, ~.[2]))) + geom_sf(fill = &quot;white&quot;, colour = &quot;black&quot;, shape = 21) + # Add the points on top theme_minimal() + # Use an aesthetic template labs(x = &quot;Longitude (E)&quot;, y = &quot;Latitude (N)&quot;, # Add labels fill = &quot;Density&quot;, caption = &quot;Lifebat stations around the UK and Ireland&quot;) ## Combine the two plots RNLI_map + # Start with the biggest map annotation_custom(ggplotGrob(World_map), # Add the world map xmin = -3, xmax = 3, # Specify the window the inset sits in ymin = 57.5, ymax = 60.5) 9.2 Backgrounds Similarly to stacking plots on top for an inset, you may want to put an image underneath your current plot. This can be a fast way of plotting something like a detailed map of the world behind your data, instead of asking R to calculate one itself and overworking your computer. The thing to remember here is to make sure the image has the same dimensions as the plot you’re making as the overlay. ICES &lt;- sf::st_read(&quot;../data/ICES_areas/&quot;, quiet = TRUE) # Import the polygons from a shapefile ggplot() + # Start a plot ggpubr::background_image(png::readPNG(&quot;./_book/elevation.png&quot;)) + # Add the image of the world geom_sf(data = ICES, size = 0.5, colour = &quot;orange&quot;, fill = NA) + # Add the polygons theme_minimal() + # Use an appearance template labs(x = &quot;Longitude (E)&quot;, y = &quot;Latitude (N)&quot;, # Add some labels caption = &quot;ICES fishing areas&quot;, fill = NULL) + coord_sf(expand = FALSE, xlim = c(-180, 180), ylim = c(-90, 90)) # Ensure the plot size matches the image 9.3 3D It’s also recently become possible to render 3d maps in R using the rayshader package. I would class these as “pretty” maps which may be useful for presentations. The code is a bit more complicated, and can be demanding on your computer, but the results are cool! For examples and blogs you can look here "]]
